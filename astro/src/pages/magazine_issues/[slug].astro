---
interface IssueData {
  url: string;
  issue_number: number[];
  publication_date: string;
  front_cover: string;
  pdf_file: string;
}
const API_URL = 'api/magazine_issue/';

// Your existing getStaticPaths remains exactly the same
export async function getStaticPaths() {
  console.error("ðŸ“£ getStaticPaths running");

  const res = await fetch('http://host.docker.internal:8000/magazine_issue/');
  const data = await res.json();
  const allLinks = Object.values(data).flat() as { url: string }[];

  const paths = await Promise.all(
    allLinks.map(async (item) => {
      const match = item.url.match(/\/(\d+)\//);
      const slug = match?.[1];
      if (!slug) return null;

      const issueRes = await fetch(
        `http://host.docker.internal:8000/magazine_issue/${slug}/`
      );
      const issueData = await issueRes.json();

      const front_cover = issueData.front_cover.replace(
        'host.docker.internal:8000',
        'localhost:8000'
      );

      const pdf_file = issueData.pdf_file.replace(
        'host.docker.internal:8000',
        'localhost:8000'
      );

      return {
        params: { slug },
        props: { 
          ...issueData,
          front_cover,
          pdf_file,
        },
      };
    })
  );

  return paths.filter(Boolean);
}

const { url, issue_number, publication_date, front_cover, pdf_file } = Astro.props as IssueData;
import PDFModal from "../../components/PDFModal.jsx";
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={`Magazine Issue ${issue_number?.[0]} from ${publication_date}`} />
    <title>Issue {issue_number?.[0] ?? "Missing"} | FifF Kommunikation</title>
  </head>
  <body class="bg-[#F4F4F4] font-sans text-white min-h-screen">

    <nav class="bg-gray-800 shadow-md">
      <div class="max-w-7xl mx-auto px-6 py-4 flex justify-between items-center">
        <h1 class="text-3xl font-bold text-white -ml-2">FifF Kommunikation</h1>
      </div>
    </nav>

    <main class="max-w-6xl mx-auto my-12 p-8 bg-[#0B101D] shadow-lg">
      <div class="mb-8">
        {issue_number && issue_number.length > 0 ? (
          <h1 class="text-4xl font-bold mb-2 text-white">Issue #{issue_number[0]} - {publication_date.split("/")[1]}</h1>
        ) : (
          <h1 class="text-4xl font-bold mb-2 text-red-500">Issue number missing</h1>
        )}
        <p class="text-sm text-gray-400">Published: {publication_date}</p>
      </div>

      <div class="flex flex-col md:flex-row gap-8 mb-8">
        {front_cover && (
          <div class="w-full md:w-1/2">
            <div class="bg-white p-4 rounded-md shadow-lg">
              <img
                src={front_cover}
                alt={`Cover of issue ${issue_number?.[0]}`}
                class="w-full max-w-md rounded-md shadow-md mx-auto"
              />
            </div>
          </div>
        )}

        <!-- Table of Contents Section -->
        <div class="w-full md:w-1/2">
          <div class="bg-gray-800 p-6 rounded-md shadow-md h-full">
            <h2 class="text-2xl font-bold mb-4 text-white">Table of Contents</h2>
            
            <!-- ðŸ‘‡ React component renders selected PDF pages -->
            <PDFModal pdfPath={pdf_file} pages={[2]} client:load />
          </div>
        </div>
      </div>

      <a
        href={pdf_file}
        download={`issue-${issue_number?.[0]}.jpg`}
        class="inline-block px-5 py-2 rounded bg-red-600 text-white font-medium hover:bg-red-700 transition"
      >
        ðŸ“¥ Download PDF
      </a>
    </main>
  </body>
</html>